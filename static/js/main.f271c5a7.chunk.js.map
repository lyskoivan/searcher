{"version":3,"sources":["redux/searcher/searcherReducer.ts","redux/searcher/searcherTypes.ts","redux/rootReducer.ts","redux/store.ts","components/SearchBar/SearchBar.tsx","components/SearchBar/index.tsx","redux/searcher/searcherAcrions.ts","components/RepositoriesListItem/index.tsx","components/RepositoriesListItem/RepositoriesListItem.tsx","redux/searcher/searcherSelectors.ts","components/RepositoriesList/index.tsx","components/RepositoriesList/RepositoriesList.tsx","components/Pagination/index.tsx","components/Pagination/Pagination.tsx","services/githubAPI.ts","components/App/App.tsx","redux/searcher/searcherOperations.ts","components/App/index.tsx","index.tsx"],"names":["combineReducers","repositories","state","action","type","payload","page","totalPages","pages","searchQuery","query","error","searcher","searcherReducer","enhancer","composeWithDevTools","applyMiddleware","thunk","initStore","createStore","rootReducer","SearchBar","handleChangeQuery","e","setState","target","value","handleSubmitSearchForm","preventDefault","onSearch","props","toLowerCase","console","log","this","className","onSubmit","onChange","placeholder","autoComplete","Component","connect","dispatch","setSearchQuery","RepositoriesListItem","repository","href","html_url","name","stargazers_count","description","getRepositorites","store","getPage","getTotalPages","getSearchQuery","RepositoriesList","map","repo","key","id","Pagination","setPage","setPageSuccess","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","data","selected","containerClassName","pageClassName","previousClassName","nextClassName","breakClassName","disabledClassName","activeClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","getRepositories","axios","get","mapDispatchToProps","API","then","res","items","actions","Math","ceil","total_count","catch","err","App","prevProps","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f271c5a7.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nimport * as types from './searcherTypes';\n\nconst repositoriesReducer = (state = [], action: types.GetRepositoriesTypes): Array<types.Repository> => {\n  switch (action.type) {\n    case types.GET_REPOSITORIES_SUCCESS:\n      return action.payload.repositories;\n\n    default:\n      return state;\n  }\n};\n\nconst pageReducer = (state = 1, action: types.SetPageTypes): number => {\n  switch (action.type) {\n    case types.SET_PAGE:\n      return action.payload.page;\n\n    default:\n      return state;\n  }\n};\n\nconst totalPagesReducer = (state = 0, action: types.TotalPagesTypes): number => {\n  switch (action.type) {\n    case types.TOTAL_PAGES:\n      return action.payload.pages;\n\n    default:\n      return state;\n  }\n};\n\nconst SearchQueryReducer = (state = '', action: types.SetSearchQueryTypes): string => {\n  switch (action.type) {\n    case types.SET_SEARCH_QUERY:\n      return action.payload.query;\n\n    default:\n      return state;\n  }\n};\n\nconst errorReducer = (state = null, action: types.GetRepositoriesTypes): types.Error | null => {\n  switch (action.type) {\n    case types.GET_REPOSITORIES_START:\n      return null;\n\n    case types.GET_REPOSITORIES_ERROR:\n      return action.payload.error;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  repositories: repositoriesReducer,\n  page: pageReducer,\n  totalPages: totalPagesReducer,\n  searchQuery: SearchQueryReducer,\n  error: errorReducer,\n});\n","export const GET_REPOSITORIES_START = 'GET_REPOSITORIES_START';\nexport const GET_REPOSITORIES_SUCCESS = 'GET_REPOSITORIES_SUCCESS';\nexport const GET_REPOSITORIES_ERROR = 'GET_REPOSITORIES_ERROR';\n\nexport const SET_PAGE = 'SET_PAGE';\n\nexport const TOTAL_PAGES = 'TOTAL_PAGES';\n\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\n\nexport interface Repository {\n  id: number;\n  stargazers_count: number;\n  html_url: string;\n  name: string;\n  description: string;\n}\n\nexport interface Error {\n  message: string | null;\n  name: string | null;\n  stack: string | null;\n  config: object | null;\n}\n\nexport interface SearcherState {\n  repositories: Array<Repository>;\n  page: number;\n  totalPages: number;\n  searchQuery: string;\n  error: Error | null;\n}\n\nexport interface MainState {\n  searcher: SearcherState;\n}\n\n// Get repositories\n\ninterface GetRepositoriesStartAction {\n  type: typeof GET_REPOSITORIES_START;\n}\n\ninterface GetRepositoriesSuccessAction {\n  type: typeof GET_REPOSITORIES_SUCCESS;\n  payload: { repositories: Array<Repository> };\n}\n\ninterface GetRepositoriesErrorAction {\n  type: typeof GET_REPOSITORIES_ERROR;\n  payload: { error: Error };\n}\n\nexport type GetRepositoriesTypes =\n  | GetRepositoriesStartAction\n  | GetRepositoriesSuccessAction\n  | GetRepositoriesErrorAction;\n\n// Set page\n\ninterface SetPageAction {\n  type: typeof SET_PAGE;\n  payload: { page: number };\n}\n\nexport type SetPageTypes = SetPageAction;\n\n// Set Search Query\n\ninterface SetSearchQueryeAction {\n  type: typeof SET_SEARCH_QUERY;\n  payload: { query: string };\n}\n\nexport type SetSearchQueryTypes = SetSearchQueryeAction;\n\n// Set total page\n\ninterface TotalPagesAction {\n  type: typeof TOTAL_PAGES;\n  payload: { pages: number };\n}\n\nexport type TotalPagesTypes = TotalPagesAction;\n","import { combineReducers } from 'redux';\n\nimport searcherReducer from './searcher/searcherReducer';\n\nexport default combineReducers({ searcher: searcherReducer });\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nconst enhancer = composeWithDevTools(applyMiddleware(thunk));\n\nconst initStore = createStore(rootReducer, enhancer);\n\nexport default initStore;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './SearchBar.scss';\n\nimport { setSearchQuery } from '../../redux/searcher/searcherAcrions';\n\ninterface SearchProps {\n  onSearch: Function;\n}\n\nconst mapDispatchToProps = (dispatch: any): SearchProps => ({\n  onSearch: (query: string): string => dispatch(setSearchQuery(query)),\n});\n\ntype SearchBarProps = ReturnType<typeof mapDispatchToProps>;\n\ninterface SearchBarState {\n  query: string;\n}\n\nclass SearchBar extends Component<SearchBarProps, SearchBarState> {\n  state = {\n    query: '',\n  };\n\n  handleChangeQuery = (e: any): void => {\n    this.setState({ query: e.target.value });\n  };\n\n  handleSubmitSearchForm = (e: any): void => {\n    e.preventDefault();\n    const { query } = this.state;\n    if (!query) {\n      console.log('Type some query');\n      return;\n    }\n    const { onSearch } = this.props;\n    onSearch(query.toLowerCase());\n  };\n\n  render(): JSX.Element {\n    const { query } = this.state;\n\n    return (\n      <section className=\"Searchbar\">\n        <form onSubmit={this.handleSubmitSearchForm} className=\"SearchForm\">\n          <input\n            onChange={this.handleChangeQuery}\n            className=\"SearchForm-input\"\n            value={query}\n            type=\"text\"\n            placeholder=\"Search repositories...\"\n            autoComplete=\"off\"\n          />\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar);\n","import SearchBar from './SearchBar';\n\nexport default SearchBar;\n","import * as types from './searcherTypes';\n\n// Get Repositories\n\nexport const getRepositoriesStart = (): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_START,\n});\n\nexport const getRepositoriesSuccess = (\n  repositories: Array<types.Repository>,\n): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_SUCCESS,\n  payload: { repositories },\n});\n\nexport const getRepositoriesError = (error: types.Error): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_ERROR,\n  payload: { error },\n});\n\n// Set Page\n\nexport const setPageSuccess = (page: number): types.SetPageTypes => ({\n  type: types.SET_PAGE,\n  payload: { page },\n});\n\n// Set Total Page\n\nexport const setTotalPages = (pages: number): types.TotalPagesTypes => ({\n  type: types.TOTAL_PAGES,\n  payload: { pages },\n});\n\n// Set Search Query\n\nexport const setSearchQuery = (query: string): types.SetSearchQueryTypes => ({\n  type: types.SET_SEARCH_QUERY,\n  payload: { query },\n});\n","import RepositoriesListItem from './RepositoriesListItem';\n\nexport default RepositoriesListItem;\n","import React from 'react';\n\nimport './RepositoriesListItem.scss';\n\nimport { Repository } from '../../redux/searcher/searcherTypes';\n\ninterface RepositoriesListStateProps {\n  repository: Repository;\n}\n\nconst RepositoriesListItem = ({ repository }: RepositoriesListStateProps): JSX.Element => (\n  <li className=\"repository\">\n    <article className=\"repository-header\">\n      <a href={repository.html_url} className=\"repository-header-link\">\n        {repository.name}\n      </a>\n      <div className=\"star-wrapper\">\n        <span className=\"repository-star\" />\n        <p className=\"repository-star-counter\">{repository.stargazers_count}</p>\n      </div>\n    </article>\n\n    <p className=\"repository-description\">{repository.description}</p>\n  </li>\n);\n\nexport default RepositoriesListItem;\n","import { Repository, MainState } from './searcherTypes';\n\nexport const getRepositorites = (store: MainState): Array<Repository> => store.searcher.repositories;\nexport const getPage = (store: MainState): number => store.searcher.page;\nexport const getTotalPages = (store: MainState): number => store.searcher.totalPages;\nexport const getSearchQuery = (store: MainState): string => store.searcher.searchQuery;\n","import RepositoriesList from './RepositoriesList';\n\nexport default RepositoriesList;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './RepositoriesList.scss';\n\nimport RepositoriesListItem from '../RepositoriesListItem';\n\nimport { MainState, Repository } from '../../redux/searcher/searcherTypes';\nimport { getRepositorites } from '../../redux/searcher/searcherSelectors';\n\ninterface RepositoriesListStateProps {\n  repositories: Array<Repository>;\n}\n\nconst mapStateToProps = (store: MainState): RepositoriesListStateProps => ({\n  repositories: getRepositorites(store),\n});\n\nconst mapDispatchToProps = {};\n\ntype RepositoriesListProps = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst RepositoriesList: React.FC<RepositoriesListProps> = ({\n  repositories = [],\n}: RepositoriesListStateProps): JSX.Element => (\n  <section className=\"repositories\">\n    <ul className=\"repositories-list\">\n      {repositories.map((repo: Repository) => (\n        <RepositoriesListItem key={repo.id} repository={repo} />\n      ))}\n    </ul>\n  </section>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RepositoriesList);\n","import Pagination from './Pagination';\n\nexport default Pagination;\n","import ReactPaginate from 'react-paginate';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './Pagination.scss';\n\nimport { setPageSuccess } from '../../redux/searcher/searcherAcrions';\nimport { MainState } from '../../redux/searcher/searcherTypes';\nimport { getPage, getTotalPages } from '../../redux/searcher/searcherSelectors';\n\ninterface PaginationStateProps {\n  page: number;\n  totalPages: number;\n}\n\ninterface PaginationDispatchProps {\n  setPage: Function;\n}\n\ninterface PaginationProps {\n  page: number;\n  totalPages: number;\n  setPage: Function;\n}\n\nconst mapStateToProps = (store: MainState): PaginationStateProps => ({\n  page: getPage(store),\n  totalPages: getTotalPages(store),\n});\n\nconst mapDispatchToProps = (dispatch: any): PaginationDispatchProps => ({\n  setPage: (page: number): number => dispatch(setPageSuccess(page)),\n});\n\ntype PaginationTypeProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst Pagination: React.FC<PaginationTypeProps> = ({\n  page,\n  totalPages,\n  setPage,\n}: PaginationProps): JSX.Element => {\n  const handlePageClick = (data: any | {}): void => {\n    setPage(data.selected + 1);\n  };\n\n  return (\n    <section className=\"pagination\">\n      <ReactPaginate\n        pageCount={totalPages}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName=\"pagination-list\"\n        pageClassName=\"pagination-list-item\"\n        previousClassName=\"pagination-list-item\"\n        nextClassName=\"pagination-list-item\"\n        breakClassName=\"pagination-list-item\"\n        disabledClassName=\"pagination-list-item_disabled\"\n        activeClassName=\"pagination-list-item_active\"\n        pageLinkClassName=\"pagination-list-link\"\n        previousLinkClassName=\"pagination-list-link\"\n        nextLinkClassName=\"pagination-list-link\"\n      />\n    </section>\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);\n","import axios from 'axios';\n\nconst getRepositories = (page: number, query: string): any =>\n  axios.get(`https://api.github.com/search/repositories?page=${page}&q=${query}&sort=stars`);\n\nexport default getRepositories;\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport './App.scss';\n\nimport SearchBar from '../SearchBar';\nimport RepositoriesList from '../RepositoriesList';\nimport Pagination from '../Pagination';\n\nimport setRepositories from '../../redux/searcher/searcherOperations';\nimport { getRepositorites, getPage, getSearchQuery } from '../../redux/searcher/searcherSelectors';\nimport { MainState, Repository } from '../../redux/searcher/searcherTypes';\n\ninterface AppStateProps {\n  repositories: Array<Repository>;\n  page: number;\n  searchQuery: string;\n}\n\nconst mapStateToProps = (store: MainState): AppStateProps => ({\n  repositories: getRepositorites(store),\n  page: getPage(store),\n  searchQuery: getSearchQuery(store),\n});\n\nconst mapDispatchToProps = {\n  getRepositories: setRepositories,\n};\n\ninterface AppDispatchProps {\n  getRepositories: Function;\n}\n\ntype AppProps = AppDispatchProps & AppStateProps;\n\nclass App extends Component<AppProps, {}> {\n  componentDidUpdate(prevProps: AppProps): void {\n    const { page, searchQuery, getRepositories } = this.props;\n\n    if (prevProps.page !== page || prevProps.searchQuery !== searchQuery) {\n      getRepositories(page, searchQuery);\n    }\n  }\n\n  render(): JSX.Element {\n    const { repositories } = this.props;\n    return (\n      <div className=\"main-wrapper\">\n        <header className=\"main-header\">\n          <SearchBar />\n          {repositories.length > 0 && <RepositoriesList />}\n          {repositories.length > 0 && <Pagination />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import API from '../../services/githubAPI';\nimport * as actions from './searcherAcrions';\n\nconst getRepositories = (pages: number, query: string) => (dispatch: any): void => {\n  dispatch(actions.getRepositoriesStart());\n\n  API(pages, query)\n    .then((res: any) => {\n      dispatch(actions.getRepositoriesSuccess(res.data.items));\n      dispatch(actions.setTotalPages(Math.ceil(res.data.total_count / 30)));\n    })\n    .catch((err: any) => dispatch(actions.getRepositoriesError(err)));\n};\n\nexport default getRepositories;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'normalize.css';\nimport './styles/main.scss';\n\nimport store from './redux/store';\n\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}