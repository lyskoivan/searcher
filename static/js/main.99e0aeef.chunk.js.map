{"version":3,"sources":["services/githubAPI.ts","redux/searcher/searcherReducer.ts","redux/searcher/searcherTypes.ts","redux/rootReducer.ts","redux/store.ts","components/SearchBar/SearchBar.tsx","components/SearchBar/index.tsx","redux/searcher/searcherAcrions.ts","redux/searcher/searcherSelectors.ts","components/Pagination/index.tsx","components/Pagination/Pagination.tsx","components/RepositoriesListItem/index.tsx","components/RepositoriesListItem/RepositoriesListItem.tsx","components/RepositoriesList/index.tsx","components/RepositoriesList/RepositoriesList.tsx","redux/searcher/searcherOperations.ts","components/App/App.tsx","components/App/index.tsx","index.tsx"],"names":["cancel","combineReducers","repositories","state","action","type","payload","page","totalPages","pages","searchQuery","query","error","searcher","searcherReducer","enhancer","composeWithDevTools","applyMiddleware","thunk","initStore","createStore","rootReducer","dispatch","CancelToken","axios","SearchBar","handleChangeQuery","e","setState","target","value","handleCancelRequest","preventDefault","handleSubmitSearchForm","onSearch","props","toLowerCase","alert","this","className","onSubmit","onChange","placeholder","autoComplete","onClick","Component","connect","setSearchQuery","getRepositorites","store","getPage","getTotalPages","getSearchQuery","Pagination","setPage","setPageSuccess","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","data","selected","containerClassName","pageClassName","previousClassName","nextClassName","breakClassName","disabledClassName","activeClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","RepositoriesListItem","repository","href","html_url","name","stargazers_count","description","RepositoriesList","map","repo","key","id","getRepositories","get","cancelToken","c","catch","thrown","isCancel","Error","console","log","message","getApiRepositories","then","res","items","actions","Math","ceil","total_count","err","mapDispatchToProps","setRepositories","App","prevProps","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99e0aeef.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst { CancelToken } = axios;\n\nexport let cancel: Function;\n\nexport const getApiRepositories = (page: number, query: string): Promise<any> =>\n  axios\n    .get(`https://api.github.com/search/repositories?page=${page}&q=${query}&sort=stars`, {\n      cancelToken: new CancelToken((c: Function) => {\n        cancel = c;\n      }),\n    })\n    .catch((thrown): void => {\n      if (axios.isCancel(thrown)) {\n        console.log('Request canceled', thrown.message);\n      } else {\n        throw new Error(thrown);\n      }\n    });\n","import { combineReducers } from 'redux';\n\nimport * as types from './searcherTypes';\n\nconst repositoriesReducer = (state = [], action: types.GetRepositoriesTypes): Array<types.Repository> => {\n  switch (action.type) {\n    case types.GET_REPOSITORIES_SUCCESS:\n      return action.payload.repositories;\n\n    default:\n      return state;\n  }\n};\n\nconst pageReducer = (state = 1, action: types.SetPageTypes): number => {\n  switch (action.type) {\n    case types.SET_PAGE:\n      return action.payload.page;\n\n    default:\n      return state;\n  }\n};\n\nconst totalPagesReducer = (state = 0, action: types.TotalPagesTypes): number => {\n  switch (action.type) {\n    case types.TOTAL_PAGES:\n      return action.payload.pages;\n\n    default:\n      return state;\n  }\n};\n\nconst SearchQueryReducer = (state = '', action: types.SetSearchQueryTypes): string => {\n  switch (action.type) {\n    case types.SET_SEARCH_QUERY:\n      return action.payload.query;\n\n    default:\n      return state;\n  }\n};\n\nconst errorReducer = (state = null, action: types.GetRepositoriesTypes): types.Error | null => {\n  switch (action.type) {\n    case types.GET_REPOSITORIES_START:\n      return null;\n\n    case types.GET_REPOSITORIES_ERROR:\n      return action.payload.error;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  repositories: repositoriesReducer,\n  page: pageReducer,\n  totalPages: totalPagesReducer,\n  searchQuery: SearchQueryReducer,\n  error: errorReducer,\n});\n","export const GET_REPOSITORIES_START = 'GET_REPOSITORIES_START';\nexport const GET_REPOSITORIES_SUCCESS = 'GET_REPOSITORIES_SUCCESS';\nexport const GET_REPOSITORIES_ERROR = 'GET_REPOSITORIES_ERROR';\n\nexport const SET_PAGE = 'SET_PAGE';\n\nexport const TOTAL_PAGES = 'TOTAL_PAGES';\n\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\n\nexport interface Repository {\n  id: number;\n  stargazers_count: number;\n  html_url: string;\n  name: string;\n  description: string;\n}\n\nexport interface Error {\n  message: string | null;\n  name: string | null;\n  stack: string | null;\n  config: object | null;\n}\n\nexport interface SearcherState {\n  repositories: Array<Repository>;\n  page: number;\n  totalPages: number;\n  searchQuery: string;\n  error: Error | null;\n}\n\nexport interface MainState {\n  searcher: SearcherState;\n}\n\n// Get repositories\n\ninterface GetRepositoriesStartAction {\n  type: typeof GET_REPOSITORIES_START;\n}\n\ninterface GetRepositoriesSuccessAction {\n  type: typeof GET_REPOSITORIES_SUCCESS;\n  payload: { repositories: Array<Repository> };\n}\n\ninterface GetRepositoriesErrorAction {\n  type: typeof GET_REPOSITORIES_ERROR;\n  payload: { error: Error };\n}\n\nexport type GetRepositoriesTypes =\n  | GetRepositoriesStartAction\n  | GetRepositoriesSuccessAction\n  | GetRepositoriesErrorAction;\n\n// Set page\n\ninterface SetPageAction {\n  type: typeof SET_PAGE;\n  payload: { page: number };\n}\n\nexport type SetPageTypes = SetPageAction;\n\n// Set Search Query\n\ninterface SetSearchQueryeAction {\n  type: typeof SET_SEARCH_QUERY;\n  payload: { query: string };\n}\n\nexport type SetSearchQueryTypes = SetSearchQueryeAction;\n\n// Set total page\n\ninterface TotalPagesAction {\n  type: typeof TOTAL_PAGES;\n  payload: { pages: number };\n}\n\nexport type TotalPagesTypes = TotalPagesAction;\n","import { combineReducers } from 'redux';\n\nimport searcherReducer from './searcher/searcherReducer';\n\nexport default combineReducers({ searcher: searcherReducer });\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\n\nconst enhancer = composeWithDevTools(applyMiddleware(thunk));\n\nexport const initStore = createStore(rootReducer, enhancer);\n\nconst { dispatch } = initStore;\n\nexport type Dispatch = typeof dispatch;\n","import { connect } from 'react-redux';\nimport React, { Component, SyntheticEvent, MouseEvent, ChangeEvent } from 'react';\n\nimport { Dispatch } from '../../redux/store';\nimport { cancel } from '../../services/githubAPI';\nimport { SetSearchQueryTypes } from '../../redux/searcher/searcherTypes';\nimport { setSearchQuery } from '../../redux/searcher/searcherAcrions';\n\nimport './SearchBar.scss';\n\ninterface SearchProps {\n  onSearch: Function;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): SearchProps => ({\n  onSearch: (query: string): SetSearchQueryTypes => dispatch(setSearchQuery(query)),\n});\n\ntype SearchBarProps = ReturnType<typeof mapDispatchToProps>;\n\ninterface SearchBarState {\n  query: string;\n}\n\nclass SearchBar extends Component<SearchBarProps, SearchBarState> {\n  state = {\n    query: '',\n  };\n\n  handleChangeQuery = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ query: e.target.value });\n  };\n\n  handleCancelRequest = (e: MouseEvent<HTMLButtonElement>): void => {\n    e.preventDefault();\n\n    cancel('Operation canceled by the user.');\n\n    this.setState({ query: '' });\n  };\n\n  handleSubmitSearchForm = (e: SyntheticEvent): void => {\n    e.preventDefault();\n\n    const { query } = this.state;\n\n    if (!query) {\n      alert('Type some query');\n\n      return;\n    }\n\n    const { onSearch } = this.props;\n\n    onSearch(query.toLowerCase());\n  };\n\n  render(): JSX.Element {\n    const { query } = this.state;\n\n    return (\n      <section className=\"Searchbar\">\n        <form onSubmit={this.handleSubmitSearchForm} className=\"SearchForm\">\n          <input\n            onChange={this.handleChangeQuery}\n            className=\"SearchForm-input\"\n            value={query}\n            type=\"text\"\n            placeholder=\"Search repositories...\"\n            autoComplete=\"off\"\n          />\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n        </form>\n        <button type=\"button\" className=\"Searchbar-cancel\" onClick={this.handleCancelRequest}>\n          <span className=\"Searchbar-cancel-label\">Cancel</span>\n        </button>\n      </section>\n    );\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar);\n","import SearchBar from './SearchBar';\n\nexport default SearchBar;\n","import * as types from './searcherTypes';\n\n// Get Repositories\n\nexport const getRepositoriesStart = (): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_START,\n});\n\nexport const getRepositoriesSuccess = (\n  repositories: Array<types.Repository>,\n): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_SUCCESS,\n  payload: { repositories },\n});\n\nexport const getRepositoriesError = (error: types.Error): types.GetRepositoriesTypes => ({\n  type: types.GET_REPOSITORIES_ERROR,\n  payload: { error },\n});\n\n// Set Page\n\nexport const setPageSuccess = (page: number): types.SetPageTypes => ({\n  type: types.SET_PAGE,\n  payload: { page },\n});\n\n// Set Total Page\n\nexport const setTotalPages = (pages: number): types.TotalPagesTypes => ({\n  type: types.TOTAL_PAGES,\n  payload: { pages },\n});\n\n// Set Search Query\n\nexport const setSearchQuery = (query: string): types.SetSearchQueryTypes => ({\n  type: types.SET_SEARCH_QUERY,\n  payload: { query },\n});\n","import { Repository, MainState } from './searcherTypes';\n\nexport const getRepositorites = (store: MainState): Array<Repository> => store.searcher.repositories;\nexport const getPage = (store: MainState): number => store.searcher.page;\nexport const getTotalPages = (store: MainState): number => store.searcher.totalPages;\nexport const getSearchQuery = (store: MainState): string => store.searcher.searchQuery;\n","import Pagination from './Pagination';\n\nexport default Pagination;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ReactPaginate from 'react-paginate';\n\nimport { Dispatch } from '../../redux/store';\nimport { MainState, SetPageTypes } from '../../redux/searcher/searcherTypes';\nimport { setPageSuccess } from '../../redux/searcher/searcherAcrions';\nimport { getPage, getTotalPages } from '../../redux/searcher/searcherSelectors';\n\nimport './Pagination.scss';\n\ninterface PaginationStateProps {\n  page: number;\n  totalPages: number;\n}\n\ninterface PaginationDispatchProps {\n  setPage: Function;\n}\n\ninterface PaginationProps {\n  page: number;\n  totalPages: number;\n  setPage: Function;\n}\n\ninterface ClickData {\n  selected: number;\n}\n\nconst mapStateToProps = (store: MainState): PaginationStateProps => ({\n  page: getPage(store),\n  totalPages: getTotalPages(store),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): PaginationDispatchProps => ({\n  setPage: (page: number): SetPageTypes => dispatch(setPageSuccess(page)),\n});\n\ntype PaginationTypeProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst Pagination: React.FC<PaginationTypeProps> = ({\n  page,\n  totalPages,\n  setPage,\n}: PaginationProps): JSX.Element => {\n  const handlePageClick = (data: ClickData): void => {\n    setPage(data.selected + 1);\n  };\n\n  return (\n    <section className=\"pagination\">\n      <ReactPaginate\n        pageCount={totalPages}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageClick}\n        containerClassName=\"pagination-list\"\n        pageClassName=\"pagination-list-item\"\n        previousClassName=\"pagination-list-item\"\n        nextClassName=\"pagination-list-item\"\n        breakClassName=\"pagination-list-item\"\n        disabledClassName=\"pagination-list-item_disabled\"\n        activeClassName=\"pagination-list-item_active\"\n        pageLinkClassName=\"pagination-list-link\"\n        previousLinkClassName=\"pagination-list-link\"\n        nextLinkClassName=\"pagination-list-link\"\n      />\n    </section>\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);\n","import RepositoriesListItem from './RepositoriesListItem';\n\nexport default RepositoriesListItem;\n","import React from 'react';\n\nimport { Repository } from '../../redux/searcher/searcherTypes';\n\nimport './RepositoriesListItem.scss';\n\ninterface RepositoriesListStateProps {\n  repository: Repository;\n}\n\nconst RepositoriesListItem = ({ repository }: RepositoriesListStateProps): JSX.Element => (\n  <li className=\"repository\">\n    <article className=\"repository-header\">\n      <a href={repository.html_url} className=\"repository-header-link\">\n        {repository.name}\n      </a>\n      <div className=\"star-wrapper\">\n        <span className=\"repository-star\" />\n        <p className=\"repository-star-counter\">{repository.stargazers_count}</p>\n      </div>\n    </article>\n\n    <p className=\"repository-description\">{repository.description}</p>\n  </li>\n);\n\nexport default RepositoriesListItem;\n","import RepositoriesList from './RepositoriesList';\n\nexport default RepositoriesList;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport RepositoriesListItem from '../RepositoriesListItem';\nimport { getRepositorites } from '../../redux/searcher/searcherSelectors';\nimport { MainState, Repository } from '../../redux/searcher/searcherTypes';\n\nimport './RepositoriesList.scss';\n\ninterface RepositoriesListStateProps {\n  repositories: Array<Repository>;\n}\n\nconst mapStateToProps = (store: MainState): RepositoriesListStateProps => ({\n  repositories: getRepositorites(store),\n});\n\nconst mapDispatchToProps = {};\n\ntype RepositoriesListProps = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst RepositoriesList: React.FC<RepositoriesListProps> = ({\n  repositories = [],\n}: RepositoriesListStateProps): JSX.Element => (\n  <section className=\"repositories\">\n    <ul className=\"repositories-list\">\n      {repositories.map((repo: Repository) => (\n        <RepositoriesListItem key={repo.id} repository={repo} />\n      ))}\n    </ul>\n  </section>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RepositoriesList);\n","import * as actions from './searcherAcrions';\nimport { getApiRepositories } from '../../services/githubAPI';\n\nimport { Dispatch } from '../store';\nimport { Repository, Error } from './searcherTypes';\n\ninterface AxiosDataType {\n  items: Repository[];\n  total_count: number;\n  incomplete_results: boolean;\n}\n\ninterface AxiosType {\n  data: AxiosDataType;\n  status: number;\n  statusText: string;\n}\n\nconst getRepositories = (pages: number, query: string) => (dispatch: Dispatch): void => {\n  dispatch(actions.getRepositoriesStart());\n\n  getApiRepositories(pages, query)\n    .then((res: AxiosType) => {\n      dispatch(actions.getRepositoriesSuccess(res.data.items));\n      dispatch(actions.setTotalPages(Math.ceil(res.data.total_count / 30)));\n    })\n    .catch((err: Error) => dispatch(actions.getRepositoriesError(err)));\n};\n\nexport default getRepositories;\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\n\nimport SearchBar from '../SearchBar';\nimport Pagination from '../Pagination';\nimport RepositoriesList from '../RepositoriesList';\nimport setRepositories from '../../redux/searcher/searcherOperations';\nimport { MainState, Repository } from '../../redux/searcher/searcherTypes';\nimport { getRepositorites, getPage, getSearchQuery } from '../../redux/searcher/searcherSelectors';\n\nimport './App.scss';\n\ninterface AppStateProps {\n  repositories: Array<Repository>;\n  page: number;\n  searchQuery: string;\n}\n\nconst mapStateToProps = (store: MainState): AppStateProps => ({\n  repositories: getRepositorites(store),\n  page: getPage(store),\n  searchQuery: getSearchQuery(store),\n});\n\nconst mapDispatchToProps = {\n  getRepositories: setRepositories,\n};\n\ninterface AppDispatchProps {\n  getRepositories: Function;\n}\n\ntype AppProps = AppDispatchProps & AppStateProps;\n\nclass App extends Component<AppProps, {}> {\n  componentDidUpdate(prevProps: AppProps): void {\n    const { page, searchQuery, getRepositories } = this.props;\n\n    if (prevProps.page !== page || prevProps.searchQuery !== searchQuery) {\n      getRepositories(page, searchQuery);\n    }\n  }\n\n  render(): JSX.Element {\n    const { repositories } = this.props;\n    return (\n      <div className=\"main-wrapper\">\n        <header className=\"main-header\">\n          <SearchBar />\n          {repositories.length > 0 && <RepositoriesList />}\n          {repositories.length > 0 && <Pagination />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'normalize.css';\nimport './styles/main.scss';\n\nimport { initStore } from './redux/store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={initStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}